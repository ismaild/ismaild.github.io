<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CODIEZ]]></title>
  <link href="http://blog.codiez.co.za/atom.xml" rel="self"/>
  <link href="http://blog.codiez.co.za/"/>
  <updated>2013-11-10T15:56:53+02:00</updated>
  <id>http://blog.codiez.co.za/</id>
  <author>
    <name><![CDATA[Ismail Dhorat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Oracle on CentOS 6.4 with Vagrant and Ansible]]></title>
    <link href="http://blog.codiez.co.za/2013/11/install-oracle-centos-64-vagrant-ansible/"/>
    <updated>2013-11-10T01:31:00+02:00</updated>
    <id>http://blog.codiez.co.za/2013/11/install-oracle-centos-64-vagrant-ansible</id>
    <content type="html"><![CDATA[<p>This post will cover installing oracle xe on CentOS 6.4 using vagrant and ansible. If you have not already, read the first post on <a href="http://blog.codiez.co.za/2013/11/vagrant-centos-64-base-box/">creating a vagrant centos base box</a></p>

<p>The source code is available at: <a href="https://github.com/ismaild/vagrant-centos-oracle">https://github.com/ismaild/vagrant-centos-oracle</a></p>

<h3>About Ansible</h3>

<p><a href="http://www.ansibleworks.com/">Ansible</a> is an IT orchestration engine/configuration management system, that lets you easily describe how you would like your servers to look and then automate it. It differs from Chef and Puppet, as it requires nothing to be installed on the server, it uses ssh. Tasks are described in yml, which can be written and read even by non programmers.</p>

<h3>Vagrant init</h3>

<p>Now that we have the <a href="http://blog.codiez.co.za/2013/11/vagrant-centos-64-base-box/">CentOS 6.4 base box</a>, we can add it to vagrant with:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>centos-64-x86_64 <span class="o">(</span>virtualbox<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vagrant uses a <code>Vagrantfile</code> to describe the type of machine you would like to build, and the file should be stored in the root directory of your source code. Next we create the <code>Vagrantfile</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ../vagrant-centos-oracle
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../vagrant-centos-oracle
</span><span class='line'><span class="nv">$ </span>vagrant init
</span><span class='line'>A <span class="sb">`</span>Vagrantfile<span class="sb">`</span> has been placed in this directory. You are now
</span><span class='line'>ready to <span class="sb">`</span>vagrant up<span class="sb">`</span> your first virtual environment! Please <span class="nb">read</span>
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'><span class="sb">`</span>vagrantup.com<span class="sb">`</span> <span class="k">for </span>more information on using Vagrant.
</span></code></pre></td></tr></table></div></figure>


<p>Edit the <code>Vagrantfile</code> and change <code>config.vm.box</code> to:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;centos-64-x86_64&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we run:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Importing base box <span class="s1">&#39;centos-64-x86_64&#39;</span>...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Matching MAC address <span class="k">for </span>NAT networking...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Setting the name of the VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Creating shared folders metadata...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Preparing network interfaces based on configuration...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Forwarding ports...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- <span class="nv">22</span> <span class="o">=</span>&gt; 2222 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Booting VM...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Waiting <span class="k">for </span>machine to boot. This may take a few minutes...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Machine booted and ready!
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> Mounting shared folders...
</span><span class='line'><span class="o">[</span>default<span class="o">]</span> -- /vagrant
</span><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>Welcome to your Vagrant-built virtual machine.
</span><span class='line'><span class="o">[</span>vagrant@localhost ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great it works, we have a basic CentOS 6.4 Minimal install working, this is exactly like the box we created with veewee. Not too interesting just yet. We can add other customizations, like increase the memory size by adding this to the <code>Vagrantfile</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class='line'>    <span class="n">vb</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;1024&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will also notice, that <code>/vagrant</code> folder is a shared folder with your host machine, the root of the directory where the <code>Vagrantfile</code> is stored.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>vagrant@localhost ~<span class="o">]</span><span class="nv">$ </span>ls /vagrant/
</span><span class='line'>Vagrantfile
</span><span class='line'><span class="o">[</span>vagrant@localhost ~<span class="o">]</span><span class="nv">$ </span>touch /vagrant/abd.txt
</span><span class='line'><span class="o">[</span>vagrant@localhost ~<span class="o">]</span><span class="nv">$ </span>ls /vagrant/
</span><span class='line'>abd.txt  Vagrantfile
</span><span class='line'><span class="o">[</span>vagrant@localhost ~<span class="o">]</span><span class="nv">$ </span><span class="nb">exit</span>
</span><span class='line'><span class="nb">logout</span>
</span><span class='line'>Connection to 127.0.0.1 closed.
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Vagrantfile abd.txt
</span></code></pre></td></tr></table></div></figure>


<h3>Creating the playbook</h3>

<p>Ansible has playbooks, which basically describe all the steps ansible needs to execute to get your system to the required state. All the steps are described in a yml file, with specific keywords for each task. You can read more at: <a href="http://www.ansibleworks.com/docs/playbooks.html">http://www.ansibleworks.com/docs/playbooks.html</a></p>

<p>Before we start with our oracle playbook, we need to create a few directories.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir provisioning
</span><span class='line'><span class="nv">$ </span>touch provisioning/oracle-xe.yml
</span><span class='line'><span class="nv">$ </span>mkdir oracle
</span><span class='line'><span class="nv">$ </span>touch oracle/xe.rsp
</span></code></pre></td></tr></table></div></figure>


<p>Before installing oracle, a few base packages are needed. Lets ensure our machine will have these packages before oracle is installed by adding this to the playbook:</p>

<figure class='code'><figcaption><span>oracle-xe.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ensure packages required are installed</span>
</span><span class='line'>      <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=$item state=latest</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">libaio</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bc</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">flex</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unzip</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>hosts:</code> specifies which hosts to run the playbook on</li>
<li>Then we tell ansible to use <code>sudo</code> to run the commands</li>
<li>We then have the list of tasks we need to run</li>
<li>The <code>yum</code> command can be used to install packages, specifying them with <code>pkg=</code></li>
<li><code>with_items</code> lets you specify multiple items and ansible will loop through all of the items on the list and run yum for each package</li>
<li>For the <code>name:</code> you can use anything that describes the task.</li>
</ul>


<p>Unfortunately due to oracle licensing, you will need to accept the license agreement and download the oracle rpm from:</p>

<p><a href="http://www.oracle.com/technetwork/products/express-edition/downloads/index.html">http://www.oracle.com/technetwork/products/express-edition/downloads/index.html</a></p>

<p>Save the zip file to the <code>oracle</code> directory.</p>

<p>The next thing we need to include in our playbook, is unzipping and installing oracle:</p>

<figure class='code'><figcaption><span>oracle-xe.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unzip oracle rpm</span>
</span><span class='line'>      <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/usr/bin/unzip -q /vagrant/oracle/oracle*.rpm.zip -d /vagrant/oracle creates=/vagrant/oracle/Disk1</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">install oracle</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/rpm -ivh /vagrant/oracle/Disk1/oracle-xe-11.2.0-1.0.x86_64.rpm creates=/u01</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>creates=</code> defines a directory that is created when the task runs, if the box is reloaded and the directory exists, the task will be skipped.</li>
<li>You will need this or to ignore errors as the oracle installation returns an error if it is already installed.</li>
</ul>


<p>Then we configure oracle and the vagrant user environment</p>

<figure class='code'><figcaption><span>oracle-xe.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">configure oracle</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/etc/init.d/oracle-xe configure responseFile=/vagrant/oracle/xe.rsp</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ignore_errors</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">setup oracle environment</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/echo &#39;source /u01/app/oracle/product/11.2.0/xe/bin/oracle_env.sh&#39; &gt;&gt; /home/vagrant/.bash_profile</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>shell</code> does what it says on the box</li>
<li>We need to pass the oracle configure script a response file <code>xe.rsp</code> so it does not wait for input</li>
<li>Then we setup the vagrant users environment</li>
</ul>


<p>Add the following to <code>oracle/xe.rsp</code></p>

<figure class='code'><figcaption><span>text </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ORACLE_HTTP_PORT=8080
</span><span class='line'>ORACLE_LISTENER_PORT=1521
</span><span class='line'>ORACLE_PASSWORD=manager
</span><span class='line'>ORACLE_CONFIRM_PASSWORD=manager
</span><span class='line'>ORACLE_DBENABLE=y</span></code></pre></td></tr></table></div></figure>


<p>We need to tell Vagrant to use the ansible playbook, by adding the following to the <code>Vagrantfile</code>. We also set the ansible verbose setting to extra, so we can see what is going on.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;ansible&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">ansible</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ansible</span><span class="o">.</span><span class="n">playbook</span> <span class="o">=</span> <span class="s2">&quot;provisioning/oracle-xe.yml&quot;</span>
</span><span class='line'>    <span class="n">ansible</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="s2">&quot;extra&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now test that oracle works from inside the VM:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>Last login: Sun Nov 10 11:35:22 2013 from 10.0.2.2
</span><span class='line'>Welcome to your Vagrant-built virtual machine.
</span><span class='line'><span class="o">[</span>vagrant@localhost ~<span class="o">]</span><span class="nv">$ </span>sqlplus system/manager@localhost
</span><span class='line'>
</span><span class='line'>SQL*Plus: Release 11.2.0.2.0 Production on Sun Nov 10 12:37:23 2013
</span><span class='line'>
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 1982, 2011, Oracle.  All rights reserved.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Connected to:
</span><span class='line'>Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production
</span></code></pre></td></tr></table></div></figure>


<h3>Vagrant port fowarding &ndash; connect from your host</h3>

<p>If we try an connect from the host to the VM, it wont work. To get this to work we will use vagrant port forwarding by adding the following to our Vagrantfile.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">8080</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span><span class="p">,</span> <span class="n">auto_correct</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">1521</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">1521</span><span class="p">,</span> <span class="n">auto_correct</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to modify our playbook, to disable iptables and to configure oracle to accept remote connections, from outside the VM.</p>

<figure class='code'><figcaption><span>oracle-xe.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">stop ip tables</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">service iptables stop</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">set oracle listener</span>
</span><span class='line'>      <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">False</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ORACLE_HOME=/u01/app/oracle/product/11.2.0/xe /u01/app/oracle/product/11.2.0/xe/bin/sqlplus</span>
</span><span class='line'>        <span class="l-Scalar-Plain">system/manager@localhost &lt; /vagrant/oracle/set_listener.sql</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also create a new file: <code>oracle/set_listener.sql</code></p>

<figure class='code'><figcaption><span>set_listener.sql </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXEC</span> <span class="n">DBMS_XDB</span><span class="p">.</span><span class="n">SETLISTENERLOCALACCESS</span><span class="p">(</span><span class="k">FALSE</span><span class="p">);</span>
</span><span class='line'><span class="n">quit</span><span class="p">;</span>
</span><span class='line'><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets see if we can connect from our host to the VM:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant provision
</span><span class='line'><span class="nv">$ </span>sqlplus system/manager@localhost
</span><span class='line'>
</span><span class='line'>SQL*Plus: Release 11.2.0.3.0 Production on Sun Nov 10 15:19:50 2013
</span><span class='line'>
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 1982, 2012, Oracle.  All rights reserved.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Connected to:
</span><span class='line'>Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production
</span><span class='line'>
</span><span class='line'>SQL&gt; <span class="nb">exit</span>
</span><span class='line'><span class="nv">$ </span>curl -v http://localhost:8080/apex/f?p<span class="o">=</span>4950:1
</span></code></pre></td></tr></table></div></figure>


<p>Great, it works. This may seem like an awful amount of work just to setup a centos vm with oracle, though remember, Once you have done this once, no one else needs to follow the same steps again. All they need to do is issue a <code>vagrant up</code> from your source code repo.</p>

<p>You can view the full source for this tutorial at: <a href="https://github.com/ismaild/vagrant-centos-oracle">https://github.com/ismaild/vagrant-centos-oracle</a></p>

<p>The full <code>Vagrantfile</code> and <code>oracle-xe.yml</code> are below.</p>

<h3>Vagrantfile</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Vagrantfile API/syntax version. Don&#39;t touch unless you know what you&#39;re doing!</span>
</span><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;centos-64-x86_64&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class='line'>    <span class="n">vb</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;1024&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;ansible&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">ansible</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ansible</span><span class="o">.</span><span class="n">playbook</span> <span class="o">=</span> <span class="s2">&quot;provisioning/oracle-xe.yml&quot;</span>
</span><span class='line'>    <span class="n">ansible</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="s2">&quot;extra&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">8080</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span><span class="p">,</span> <span class="n">auto_correct</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">1521</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">1521</span><span class="p">,</span> <span class="n">auto_correct</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ansible Oracle Playbook</h3>

<figure class='code'><figcaption><span>oracle-xe.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ensure packages required are installed</span>
</span><span class='line'>      <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=$item state=latest</span>
</span><span class='line'>      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">libaio</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bc</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">flex</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">unzip</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unzip oracle rpm</span>
</span><span class='line'>      <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/usr/bin/unzip -q /vagrant/oracle/oracle*.rpm.zip -d /vagrant/oracle creates=/vagrant/oracle/Disk1</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">install oracle</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/rpm -ivh /vagrant/oracle/Disk1/oracle-xe-11.2.0-1.0.x86_64.rpm creates=/u01</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">configure oracle</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/etc/init.d/oracle-xe configure responseFile=/vagrant/oracle/xe.rsp</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ignore_errors</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">setup oracle environment</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/bin/echo &#39;source /u01/app/oracle/product/11.2.0/xe/bin/oracle_env.sh&#39; &gt;&gt; /home/vagrant/.bash_profile</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">stop ip tables</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">service iptables stop</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">set oracle listener</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ORACLE_HOME=/u01/app/oracle/product/11.2.0/xe /u01/app/oracle/product/11.2.0/xe/bin/sqlplus</span>
</span><span class='line'>        <span class="l-Scalar-Plain">system/manager@localhost &lt; /vagrant/oracle/set_listener.sql</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Vagrant CentOS 6.4 base box]]></title>
    <link href="http://blog.codiez.co.za/2013/11/vagrant-centos-64-base-box/"/>
    <updated>2013-11-09T15:39:00+02:00</updated>
    <id>http://blog.codiez.co.za/2013/11/vagrant-centos-64-base-box</id>
    <content type="html"><![CDATA[<p>This post will discuss building a CentOs 6.4 vagrant box, and in later posts we will use this box and ansible to further define our machines, such as installing oracle xe.</p>

<h3>About Vagrant</h3>

<p><a href="http://www.vagrantup.com/">Vagrant</a> lets you create and configure lightweight, reproducible, and portable development environments. All too often you will find teams developing off a central server, purely because of the pain of setting up a dev environment. Nothing is automated. There are many challenges with this approach. IMHO this slows down a team, and experimentation is discouraged and you end up &ldquo;stepping on each others code&rdquo;.</p>

<p>Vagrant can solve some these challenges, ever started a new project and spent a few days just getting your environment setup? Well with vagrant this should be a thing of the past.</p>

<h3>Before you start</h3>

<p>You will need some baseline software before we begin. Make sure you have the following installed.</p>

<ul>
<li><a href="http://git-scm.com/">Git</a></li>
<li><a href="http://www.vagrantup.com/">Vagrant</a></li>
<li><a href="http://www.ansibleworks.com/docs/intro_installation.html">Ansible</a></li>
<li><a href="https://www.virtualbox.org/">Virtualbox</a></li>
<li><a href="https://github.com/jedi4ever/veewee/blob/master/doc/requirements.md">Veewee</a></li>
</ul>


<p>Lets check we have everything installed</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git version
</span><span class='line'>git version 1.8.3.4 <span class="o">(</span>Apple Git-47<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>vagrant --version
</span><span class='line'>Vagrant 1.3.5
</span><span class='line'><span class="nv">$ </span>VBoxManage --version
</span><span class='line'>4.3.2r90405
</span><span class='line'><span class="nv">$ </span>veewee version
</span><span class='line'>Version : 0.3.12 - use at your own risk
</span></code></pre></td></tr></table></div></figure>


<h3>Build a CentOS 6.4 base box</h3>

<p>You can find a number of <a href="https://www.google.co.za/search?q=vagrant+boxes">vagrant base boxes online</a>, but i prefer creating one from scratch. We can do that easily with veewee.</p>

<p>First we clone the repo: <code>git clone https://github.com/ismaild/vagrant-boxes.git</code>. I have disabled chef and puppet since we will be using ansible. Feel free to add it back in if you want it, which you can by editing: <code>definitions/CentOS-6.4-x86_64/definition.rb</code></p>

<p>Veewee will automatically try and download the required ISO files. If you already have them, you can put them in the <code>iso</code> directory and it will not need to download.</p>

<ul>
<li><a href="http://yum.singlehop.com/CentOS/6.4/isos/x86_64/CentOS-6.4-x86_64-minimal.iso">http://yum.singlehop.com/CentOS/6.4/isos/x86_64/CentOS-6.4-x86_64-minimal.iso</a></li>
<li><a href="http://download.virtualbox.org/virtualbox/4.3.2/VBoxGuestAdditions_4.3.2.iso">http://download.virtualbox.org/virtualbox/4.3.2/VBoxGuestAdditions_4.3.2.iso</a></li>
</ul>


<p>Just make sure the version of the virtualbox guest additions matches your installed version of virtualbox.</p>

<p>Then run the following commands:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>vagrant-boxes
</span><span class='line'><span class="nv">$ </span>veewee vbox list
</span><span class='line'><span class="c"># if no boxes defined</span>
</span><span class='line'><span class="nv">$ </span>veewee vbox define CentOS-6.4-x86_64 CentOS-6.4-x86_64-minimal
</span><span class='line'><span class="c"># Build the box</span>
</span><span class='line'><span class="nv">$ </span>veewee vbox build CentOS-6.4-x86_64
</span><span class='line'><span class="c"># Eject the disks from the running VM and shutdown.</span>
</span><span class='line'><span class="c"># Package the box</span>
</span><span class='line'><span class="nv">$ </span>vagrant package --base CentOS-6.4-x86_64 --output CentOS-6.4-x86_64.box
</span><span class='line'><span class="nv">$ </span>vagrant box add centos-64-x86_64 CentOS-6.4-x86_64.box
</span></code></pre></td></tr></table></div></figure>


<p>Now we have a base CentOS 6.4 box to use. In the next post we will go through <a href="http://blog.codiez.co.za/2013/11/install-oracle-centos-64-vagrant-ansible/">setting up oracle with ansible</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Oracle instant client and ruby oci8 gem on Mac]]></title>
    <link href="http://blog.codiez.co.za/2013/09/setup-oracle-instant-client-ruby-oci8-gem-mac/"/>
    <updated>2013-09-12T22:17:00+02:00</updated>
    <id>http://blog.codiez.co.za/2013/09/setup-oracle-instant-client-ruby-oci8-gem-mac</id>
    <content type="html"><![CDATA[<p>Recently i have had to get my dev environment setup to connect to oracle for a project.</p>

<p>Getting the client setup can sometimes be a real pain with a Mac. Oracle does provide client libraries but they are painfully slow in updating them and fixing bugs. There was an <a href="https://forums.oracle.com/thread/2320019?start=0&amp;tstart=0">outstanding segmentation fault bug for over 2 years</a>.</p>

<p>Here are the steps to get it setup on Mac, and it would probably work for ubuntu etc, just have not tested it.</p>

<p>First grab the 64 bit client from:</p>

<p><a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html">http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html</a></p>

<p>You need:</p>

<ul>
<li>instantclient-basic-macos.x64-11.2.0.3.0.zip</li>
<li>instantclient-sqlplus-macos.x64-11.2.0.3.0.zip</li>
<li>instantclient-sdk-macos.x64-11.2.0.3.0.zip</li>
</ul>


<p>You can also grab the lite version, if you do not need any translations.</p>

<p>Unzip the files:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/Downloads
</span><span class='line'><span class="c">#basic</span>
</span><span class='line'>unzip -qq instantclient-basic-macos.x64-11.2.0.3.0.zip
</span><span class='line'>
</span><span class='line'><span class="c">#lite</span>
</span><span class='line'>unzip -qq instantclient-basiclite-macos.x64-11.2.0.3.0.zip
</span><span class='line'>
</span><span class='line'>unzip -qq instantclient-sqlplus-macos.x64-11.2.0.3.0.zip
</span><span class='line'>
</span><span class='line'>unzip -qq instantclient-sdk-macos.x64-11.2.0.3.0.zip
</span></code></pre></td></tr></table></div></figure>


<h2>Move files</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>instantclient_11_2
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.3.0/bin
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.3.0/lib
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.3.0/jdbc/lib
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.3.0/rdbms/jlib
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.3.0/sqlplus/admin
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv ojdbc* /usr/local/oracle/product/instantclient_64/11.2.0.3.0/jdbc/lib/
</span><span class='line'>mv x*.jar /usr/local/oracle/product/instantclient_64/11.2.0.3.0/rdbms/jlib/
</span><span class='line'>
</span><span class='line'><span class="c"># rename glogin.sql to login.sql</span>
</span><span class='line'>mv glogin.sql /usr/local/oracle/product/instantclient_64/11.2.0.3.0/sqlplus/admin/login.sql
</span><span class='line'>
</span><span class='line'><span class="c"># Move lib &amp; sdk</span>
</span><span class='line'>mv *dylib* /usr/local/oracle/product/instantclient_64/11.2.0.3.0/lib/
</span><span class='line'>mv sdk /usr/local/oracle/product/instantclient_64/11.2.0.3.0/lib/sdk
</span><span class='line'>
</span><span class='line'>mv *README /usr/local/oracle/product/instantclient_64/11.2.0.3.0/
</span><span class='line'>mv * /usr/local/oracle/product/instantclient_64/11.2.0.3.0/bin/
</span></code></pre></td></tr></table></div></figure>


<h2>Setup TNS Names</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /usr/local/admin/network
</span><span class='line'>touch /usr/local/admin/network/tnsnames.ora
</span></code></pre></td></tr></table></div></figure>


<p>Put in your tnsnames, example:</p>

<figure class='code'><figcaption><span>tnsnames.ora </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'> ORADEMO=
</span><span class='line'> (description=
</span><span class='line'>   (address_list=
</span><span class='line'>     (address = (protocol = TCP)(host = 127.0.0.1)(port = 1521))
</span><span class='line'>   )
</span><span class='line'> (connect_data =
</span><span class='line'>   (service_name=orademo)
</span><span class='line'> )
</span><span class='line'>)
</span></code></pre></td></tr></table></div></figure>


<h2>Setup your environment</h2>

<p>Create a file to store your oracle client environment variables with <code>touch ~/.oracle_client</code></p>

<p>Add the following to it:</p>

<figure class='code'><figcaption><span>.oracle_client </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export ORACLE_BASE=/usr/local/oracle
</span><span class='line'>export ORACLE_HOME=$ORACLE_BASE/product/instantclient_64/11.2.0.3.0
</span><span class='line'>export PATH=$ORACLE_HOME/bin:$PATH
</span><span class='line'>export DYLD_LIBRARY_PATH=$ORACLE_HOME/lib:$DYLD_LIBRARY_PATH
</span><span class='line'>export TNS_ADMIN=$ORACLE_BASE/admin/network
</span><span class='line'>export SQLPATH=$ORACLE_HOME/sqlplus/admin</span></code></pre></td></tr></table></div></figure>


<p>Then run:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>echo &quot;source ~/.oracle_client&quot; &gt;&gt; ~/.bash_profile
</span><span class='line'>source ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>Which will add the environment variables to your <code>.bash_profile</code>, You can also find this in my <a href="https://github.com/ismaild/dotfiles">dotfiles</a></p>

<h2>Test Sql*Plus works</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sqlplus user/pass@orademo
</span><span class='line'>
</span><span class='line'>SQL*Plus: Release 11.2.0.3.0 Production on Thu Sep 12 09:19:55 2013
</span><span class='line'>
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 1982, 2012, Oracle.  All rights reserved.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Connected to:
</span><span class='line'>Oracle Database 11g Enterprise Edition Release 11.2.0.2.0 - 64bit Production
</span><span class='line'>With the Partitioning, OLAP, Data Mining and Real Application Testing options
</span><span class='line'>
</span><span class='line'>SQL&gt; <span class="k">select </span>table_name from user_tables;
</span></code></pre></td></tr></table></div></figure>


<p>You could also store multiple versions of the client, with different <code>.oracle_client</code> files, with a small shell script you could switch between different versions (i.e like when oracle does not fix a bug for 2 years! )</p>

<h2>Install Ruby oci gem</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/local/oracle/product/instantclient_64/11.2.0.3.0/lib
</span><span class='line'>ln -s libclntsh.dylib.11.1 libclntsh.dylib
</span><span class='line'>ln -s libocci.dylib.11.1 libocci.dylib
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure sdk directory is in /usr/local/oracle/product/instantclient_64/11.2.0.3.0/lib</span>
</span><span class='line'>gem install ruby-oci8
</span></code></pre></td></tr></table></div></figure>


<p>Test that it works&hellip;</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;oci8</span>
</span><span class='line'><span class="s1">irb(main):006:0&gt; o = OCI8.new(&#39;</span><span class="n">user</span><span class="s1">&#39;,&#39;</span><span class="n">pass</span><span class="s1">&#39;,&#39;</span><span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">orademo</span><span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">=&gt; #&lt;OCI8:user&gt;</span>
</span><span class='line'><span class="s1">irb(main):011:0&gt; o.exec(&#39;</span><span class="nb">select</span> <span class="o">*</span> <span class="n">from</span> <span class="n">dual</span><span class="s1">&#39;) do |r| puts r.join(&#39;</span><span class="p">,</span><span class="err">&#39;</span><span class="p">);</span> <span class="k">end</span>
</span><span class='line'><span class="n">X</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">012</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have issues connecting with an SID or Service Name, try using the IP.</p>

<p>You now have a working oracle database client, and can connect to it from ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a MongoDB container with a docker file]]></title>
    <link href="http://blog.codiez.co.za/2013/09/setup-mongodb-container-docker-file/"/>
    <updated>2013-09-06T15:54:00+02:00</updated>
    <id>http://blog.codiez.co.za/2013/09/setup-mongodb-container-docker-file</id>
    <content type="html"><![CDATA[<p>In our previous post we went through the steps to <a href="http://blog.codiez.co.za/2013/09/setup-a-docker-container-with-mongodb/">Setup a Docker Container With MongoDB</a> manually.</p>

<p>Docker has a simple DSL that lets you automate all of these steps to make a conainer.</p>

<h3>Docker file syntax</h3>

<p>Every line in a docker file has the following structure: <code>INSTRUCTION arguments</code></p>

<p>Comments are ignored, and the first line in the docker file should contain the command <code>FROM &lt;image</code></p>

<p>Commands available <a href="http://docs.docker.io/en/latest/use/builder/">full details</a></p>

<ul>
<li>FROM (select the base image)</li>
<li>MAINTAINER (Set the author field for images)</li>
<li>RUN (run a command, and commit)</li>
<li>CMD (the default execution command for the container)</li>
<li>EXPOSE (set the port to be publicly exposed)</li>
<li>ENV (set environment variables)</li>
<li>ADD (add files from source and copy them to the container)</li>
<li>ENTRYPOINT (configure the container to run as an executable)</li>
<li>VOLUME (add a volume)</li>
<li>USER (set the user)</li>
<li>WORKDIR (set working directory)</li>
</ul>


<h3>MongoDB dockerfile</h3>

<p>We create a dockerfile, and just use all the same commands we used previously <code>touch Dockerfile</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>FROM ubuntu:latest
</span><span class='line'>
</span><span class='line'>RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
</span><span class='line'>RUN echo &#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#39; | tee /etc/apt/sources.list.d/10gen.list
</span><span class='line'>
</span><span class='line'>RUN dpkg-divert --local --rename --add /sbin/initctl
</span><span class='line'>RUN ln -s /bin/true /sbin/initctl
</span><span class='line'>
</span><span class='line'>RUN apt-get update
</span><span class='line'>RUN apt-get install mongodb-10gen
</span><span class='line'>
</span><span class='line'>RUN mkdir -p /data/db
</span><span class='line'>
</span><span class='line'>EXPOSE 27017
</span><span class='line'>CMD [&quot;usr/bin/mongod&quot;, &quot;--smallfiles&quot;]
</span></code></pre></td></tr></table></div></figure>


<p>Then we issue:</p>

<p><code>sudo docker build -t codiez/mongodb .</code></p>

<p>and start it up with&hellip;</p>

<p><code>sudo docker run -d codiez/mongodb</code></p>

<p>In the next post, we will discuss creating a SAAS database service using docker and mongodb.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Docker container with MongoDB]]></title>
    <link href="http://blog.codiez.co.za/2013/09/setup-a-docker-container-with-mongodb/"/>
    <updated>2013-09-04T09:09:00+02:00</updated>
    <id>http://blog.codiez.co.za/2013/09/setup-a-docker-container-with-mongodb</id>
    <content type="html"><![CDATA[<p>If you have not yet setup docker, follow the <a href="http://blog.codiez.co.za/2013/09/hello-docker/">install docker</a> post before this.</p>

<p>First, lets take a look at what docker images we have.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker images
</span><span class='line'>REPOSITORY          TAG                 ID                  CREATED             SIZE
</span><span class='line'>ubuntu              12.04               8dbd9e392a96        4 months ago        131.5 MB <span class="o">(</span>virtual 131.5 MB<span class="o">)</span>
</span><span class='line'>ubuntu              12.10               b750fe79269d        5 months ago        24.65 kB <span class="o">(</span>virtual 180.1 MB<span class="o">)</span>
</span><span class='line'>ubuntu              latest              8dbd9e392a96        4 months ago        131.5 MB <span class="o">(</span>virtual 131.5 MB<span class="o">)</span>
</span><span class='line'>ubuntu              precise             8dbd9e392a96        4 months ago        131.5 MB <span class="o">(</span>virtual 131.5 MB<span class="o">)</span>
</span><span class='line'>ubuntu              quantal             b750fe79269d        5 months ago        24.65 kB <span class="o">(</span>virtual 180.1 MB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice we have the images locally, so if we run the hello world the command runs instantly, without the need to download images again.</p>

<p>Now, lets check if we have and docker containers running:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker ps
</span><span class='line'>ID                  IMAGE               COMMAND             CREATED             STATUS              PORTS
</span></code></pre></td></tr></table></div></figure>


<p>As expected, we do not have any containers currently running.</p>

<h2>Install MongoDB</h2>

<p>Start an interactive shell in a container with: <code>sudo docker run -i -t ubuntu /bin/bash</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@f9d75a04ce10:/# apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
</span><span class='line'>
</span><span class='line'>root@f9d75a04ce10:/# <span class="nb">echo</span> <span class="s1">&#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#39;</span> | tee /etc/apt/sources.list.d/10gen.list
</span><span class='line'>
</span><span class='line'>root@f9d75a04ce10:/# apt-get update
</span><span class='line'>
</span><span class='line'><span class="c"># initctl fix</span>
</span><span class='line'>root@a1f0680f8458:/# dpkg-divert --local --rename --add /sbin/initctl
</span><span class='line'>
</span><span class='line'>root@a1f0680f8458:/# ln -s /bin/true /sbin/initctl
</span><span class='line'>
</span><span class='line'>root@a1f0680f8458:/# apt-get install mongodb-10gen
</span><span class='line'>
</span><span class='line'>root@a1f0680f8458:/# mkdir -p /data/db
</span><span class='line'>
</span><span class='line'>root@a1f0680f8458:/# mongod
</span><span class='line'>mongod --help <span class="k">for </span><span class="nb">help </span>and startup options
</span><span class='line'>Tue Sep  3 14:10:36.469 <span class="o">[</span>initandlisten<span class="o">]</span> MongoDB starting : <span class="nv">pid</span><span class="o">=</span>125 <span class="nv">port</span><span class="o">=</span>27017 <span class="nv">dbpath</span><span class="o">=</span>/data/db/ 64-bit <span class="nv">host</span><span class="o">=</span>a1f0680f8458
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDB starts succesfully in the container. Now we need to commit the container, to save the state and push to the docker index.</p>

<p><code>sudo docker commit a1f0680f8458 codiez/mongodb</code></p>

<p>Remember to replace your container id, mine was <code>a1f0680f8458</code> which you can see at the prompt, and your <code>&lt;username&gt;/&lt;container_name&gt;</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker commit a1f0680f8458 codiez/mongodb
</span><span class='line'>
</span><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker login
</span><span class='line'>Username: codiez
</span><span class='line'>Password:
</span><span class='line'>Email: ismail@codiez.co.za
</span><span class='line'>Login Succeeded
</span><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker push codiez/mongodb
</span><span class='line'>The push refers to a repository <span class="o">[</span>codiez/mongodb<span class="o">]</span> <span class="o">(</span>len: 1<span class="o">)</span>
</span><span class='line'>Processing checksums
</span><span class='line'>Sending image list
</span><span class='line'>Pushing repository codiez/mongodb <span class="o">(</span>1 tags<span class="o">)</span>
</span><span class='line'>Pushing 8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c
</span><span class='line'>Image 8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c already pushed, skipping
</span><span class='line'>Pushing tags <span class="k">for </span>rev <span class="o">[</span>8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c<span class="o">]</span> on <span class="o">{</span>https://registry-1.docker.io/v1/repositories/codiez/mongodb/tags/latest<span class="o">}</span>
</span><span class='line'>Pushing f0ab8043e4e8135379d35410a4847769efb9245d8d4817cb24a2196c434c8506
</span></code></pre></td></tr></table></div></figure>


<p>Once that completes, we can start MongoDB in the container, and map it to a port by running:</p>

<p><code>sudo docker run -d -p 27017 codiez/mongodb /usr/bin/mongod --smallfiles</code></p>

<p>This basically runs the container, based on the <code>codiez/mongodb</code> image, with the command <code>/usr/bin/mongod</code> and maps the default mongodb port 27017 to an external port.</p>

<p>Check that the container is running and get the port:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker ps
</span><span class='line'>ID                  IMAGE                   COMMAND             CREATED             STATUS              PORTS
</span><span class='line'>a1f0680f8458        codiez/mongodb:latest   /usr/bin/mongod     5 seconds ago       Up 4 seconds        49157-&gt;27017
</span></code></pre></td></tr></table></div></figure>


<p>You can also inspect the image to grab the port by running <code>sudo docker inspect container_id</code></p>

<p>Now, we can test an external connection to MongoDB, test from your local machine and connect to the VM IP with the port for your container:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo 192.168.0.21:49157
</span><span class='line'>MongoDB shell version: 2.4.5
</span><span class='line'>connecting to: 192.168.0.21:49157/test
</span><span class='line'>&gt; db
</span><span class='line'><span class="nb">test</span>
</span><span class='line'>&gt; db.posts.insert<span class="o">({</span>title:<span class="s2">&quot;Hello MongoDB in Docker&quot;</span><span class="o">})</span>
</span><span class='line'>&gt; db.posts.find<span class="o">()</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;5227058d112c68baaa3b94d9&quot;</span><span class="o">)</span>, <span class="s2">&quot;title&quot;</span> : <span class="s2">&quot;Hello MongoDB in Docker&quot;</span> <span class="o">}</span>
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p><em>Update</em>: Stop the container and restart it since we do not want to commit with the test data.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker stop a1f0680f8458
</span><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker run -d -p 27017 codiez/mongodb /usr/bin/mongod --smallfiles
</span></code></pre></td></tr></table></div></figure>


<p>One final commit to save the command and port mapping. Also notice you do not have to enter in the entire container id when running commands, just the first few characters.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker ps
</span><span class='line'>ID                  IMAGE                   COMMAND                CREATED             STATUS              PORTS
</span><span class='line'>298a43e2f98e        codiez/mongodb:latest   /usr/bin/mongod --sm   35 seconds ago      Up 34 seconds       49164-&gt;27017
</span><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker commit -run <span class="s1">&#39;{&quot;Cmd&quot;: [&quot;/usr/bin/mongod&quot;, &quot;--smallfiles&quot;], &quot;PortSpecs&quot;: [&quot;:27017&quot;]}&#39;</span> 298a4 codiez/mongodb
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have an image, we can run <code>docker pull codiez/mongodb</code> to grab the container and run it with <code>docker run -d codiez/mongodb</code></p>

<p>The next post will discuss <a href="http://blog.codiez.co.za/2013/09/setup-mongodb-container-docker-file/">automating the creation of a container with a dockerfile</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello docker]]></title>
    <link href="http://blog.codiez.co.za/2013/09/hello-docker/"/>
    <updated>2013-09-03T01:06:00+02:00</updated>
    <id>http://blog.codiez.co.za/2013/09/hello-docker</id>
    <content type="html"><![CDATA[<p>I have been playing around recently with <a href="http://www.docker.io">Docker</a>. It could really simplify deployments, creating SAAS services or even creating your own personal PAAS.</p>

<h3>What is docker?</h3>

<blockquote><p>Docker is an open-source project to easily create lightweight, portable, self-sufficient containers from any application. The same container that a developer builds and tests on a laptop can run at scale, in production, on VMs, bare metal, OpenStack clusters, public clouds and more.</p></blockquote>

<h3>Containers vs Virtual Machines</h3>

<p><strong>Virtual Machines:</strong> require a complete operating system image, with allocated resources to run. They take a long time to bootup, and have quite a bit of overhead.</p>

<p><strong>Containers:</strong> are much more lightweight, since there is no overhead of a complete virtual environment, with the kernel managing the memory and access to the file system. This also means you can bootup an application in seconds.</p>

<h3>Install docker</h3>

<p>The simplest method would be to use vagrant to set it up on Mac or Linux. (<a href="http://docs.docker.io/en/latest/installation/vagrant/">http://docs.docker.io/en/latest/installation/vagrant/</a>)</p>

<h4>Setup with vagrant</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/dotcloud/docker.git
</span><span class='line'><span class="nb">cd </span>docker
</span><span class='line'>vagrant up
</span><span class='line'>vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<h4>Manual Setup</h4>

<ul>
<li>Install virtualbox &ndash; (<a href="https://www.virtualbox.org">https://www.virtualbox.org</a>)</li>
<li>Launch a new VM, and install ubuntu 12.04 (64 bit) &ndash; (<a href="http://www.ubuntu.org">http://www.ubuntu.org</a>)</li>
</ul>


<p>Docker works best with the 3.8 kernel due to a bug in lxc which can cause some issues if you are on 3.2.  run <code>uname -r</code> to check which version you are on, and run the following if you are not on 3.8</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'>sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring
</span><span class='line'>
</span><span class='line'>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<p>Then run&hellip;</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'>sudo apt-get upgrade
</span><span class='line'>
</span><span class='line'>sudo apt-get install python-software-properties git-core build-essentials ssh
</span><span class='line'>
</span><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'>sudo add-apt-repository ppa:dotcloud/lxc-docker
</span><span class='line'>
</span><span class='line'>sudo apt-get install lxc-docker
</span></code></pre></td></tr></table></div></figure>


<p>Now, hello world&hellip; docker style.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dock@saas:~<span class="nv">$ </span>sudo docker run ubuntu /bin/echo hello world
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>dock:
</span><span class='line'>Pulling repository ubuntu
</span><span class='line'>Pulling image 8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c <span class="o">(</span>precise<span class="o">)</span> from ubuntu
</span><span class='line'>Pulling image b750fe79269d2ec9a3c593ef05b4332b1d1a02a62b4accb2c21d589ff2f5f2dc <span class="o">(</span>quantal<span class="o">)</span> from ubuntu
</span><span class='line'>Pulling 27cf784147099545 metadata
</span><span class='line'>Pulling 27cf784147099545 fs layer
</span><span class='line'>Downloading 94.86 MB/94.86 MB <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<h4>What just happened?</h4>

<ul>
<li>docker downloaded the base image from the docker index</li>
<li>it created a new LXC container</li>
<li>It allocated a filesystem for it</li>
<li>Mounted a read-write layer</li>
<li>Allocated a network interface</li>
<li>Setup an IP for it, with network address translation</li>
<li>And then executed a process in there</li>
<li>Captured its output and printed it to you</li>
</ul>


<p>In the next post, we will discuss setting up a <a href="http://blog.codiez.co.za/2013/09/setup-a-docker-container-with-mongodb/">docker container with mongodb</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uninstall MySQL & MacPorts, reinstall MySQL with Homebrew on Mac OSX]]></title>
    <link href="http://blog.codiez.co.za/2013/08/uninstall-mysql-macports-install-homebrew-mac-osx/"/>
    <updated>2013-08-27T08:58:00+02:00</updated>
    <id>http://blog.codiez.co.za/2013/08/uninstall-mysql-macports-install-homebrew-mac-osx</id>
    <content type="html"><![CDATA[<p>I have recently have to set up my dev environment once again, which can be quite a bit of a pain, especially if you do not have something like <a href="http://boxen.github.com/">boxen</a>.</p>

<p>This time however i decided to avoid macports all together, one of the &ldquo;benefits&rdquo; of macports over homebrew is the ability to run different versions since macports will install into /opt , though its a feature i never used, and i have had a bunch of strange build incompatabilities that has taken me quite a bit of time to debug.</p>

<p>Here are the steps</p>

<h2>Uninstall macports</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo port -fp uninstall --follow-dependents installed
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rm -rf /opt/local
</span><span class='line'>sudo rm -rf /Applications/DarwinPorts
</span><span class='line'>sudo rm -rf /Applications/MacPorts
</span><span class='line'>sudo rm -rf /Library/LaunchDaemons/org.macports.*
</span><span class='line'>sudo rm -rf /Library/Receipts/DarwinPorts*.pkg
</span><span class='line'>sudo rm -rf /Library/Receipts/MacPorts*.pkg
</span><span class='line'>sudo rm -rf /Library/StartupItems/DarwinPortsStartup
</span><span class='line'>sudo rm -rf /Library/Tcl/darwinports1.0
</span><span class='line'>sudo rm -rf /Library/Tcl/macports1.0
</span><span class='line'>sudo rm -rf ~/.macports
</span></code></pre></td></tr></table></div></figure>


<h2>Uninstall MySQL</h2>

<ol>
<li>Backup any databases you have using mysqldump</li>
<li>Stop MySQL if it is currently running, under settings > mysql</li>
</ol>


<p>and then run:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rm /usr/local/mysql
</span><span class='line'>sudo rm -rf /usr/local/mysql*
</span><span class='line'>sudo rm -rf /Library/StartupItems/MySQLCOM
</span><span class='line'>sudo rm -rf /Library/PreferencePanes/My*
</span><span class='line'>sudo rm -rf /Library/Receipts/mysql*
</span><span class='line'>sudo rm -rf /Library/Receipts/MySQL*
</span><span class='line'>sudo rm -rf /private/var/db/receipts/*mysql*
</span><span class='line'>rm -rf ~/Library/PreferencePanes/My*
</span></code></pre></td></tr></table></div></figure>


<p>You may also need to edit <code>/etc/hostconfig</code> and remove the line <code>MYSQLCOM=-YES-</code></p>

<h2>Install Homebrew &amp; MySQL</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</span>
</span><span class='line'>brew install mysql
</span></code></pre></td></tr></table></div></figure>


<p>Welcome to <a href="http://www.youtube.com/watch?v=hNVu55ZyC-Y&amp;list=PL7AD6AA21F4F0E76E">nirvana</a></p>

<p>:)</p>

<p>Seriously, i have not yet had any compatibility or weird build errors with homebrew.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Editing MongoDB Arrays in Rails]]></title>
    <link href="http://blog.codiez.co.za/2013/07/editing-mongodb-arrays-in-rails/"/>
    <updated>2013-07-29T22:32:00+02:00</updated>
    <id>http://blog.codiez.co.za/2013/07/editing-mongodb-arrays-in-rails</id>
    <content type="html"><![CDATA[<p>One of the awesome features of MongoDB is the ability to store arrays directly in your documents, which maps directly with ruby/python/js arrays etc.</p>

<p>An example Post model:</p>

<figure class='code'><figcaption><span>data.json </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">title:</span> <span class="err">&#39;Editing</span> <span class="err">MongoDB</span> <span class="err">Arrays</span> <span class="err">in</span> <span class="err">Rails&#39;</span>
</span><span class='line'>  <span class="err">tags:</span> <span class="err">[&#39;ruby&#39;,</span> <span class="err">&#39;rails&#39;,</span> <span class="err">&#39;mongodb&#39;]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though when working with MongoDB arrays in rails and forms to edit the data, you could end up doing a bunch of controller logic and/or js logic just to get the data in.</p>

<p>This is especially true if you want to just store a bunch of strings in the array. I tried many different ways of doing this, but the simplest solution with out any changes to your controller or forms is to just use a virtual attribute on your model.</p>

<figure class='code'><figcaption><span>Post.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Array</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tags_list</span><span class="o">=</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span> <span class="o">=</span> <span class="n">arg</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">strip</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tags_list</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in your view you just use tags_list:</p>

<figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:tags_list</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In the shell:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">tags_list</span> <span class="o">=</span> <span class="s1">&#39;tag1, tag2, tag3&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;tag1, tag2, tag3&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">tags</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Tag1&quot;</span><span class="p">,</span> <span class="s2">&quot;Tag2&quot;</span><span class="p">,</span> <span class="s2">&quot;Tag3&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any comma seperated values entered will be stored correctly in MongoDB, you could also use this to apply any transformations to the data before it saved, i.e captilizing each value.</p>

<p>We ended up using this bit of code quite often, so i extracted it out to lib, and then <a href="https://github.com/ismaild/mongoid-arraylist">packaged it into a gem</a>.</p>
]]></content>
  </entry>
  
</feed>
